{% extends "base.html.twig" %}

{% set title = 'report.write.title'|trans %}
{% block title %}{{ title }}{% endblock %}

{% block javascripts %}
  <script src="https://cdn.quilljs.com/1.3.5/quill.js"></script>
  <script>
      const toolbarOptions = [
          ['bold', 'italic', 'underline', 'blockquote'],
          [{'header': 2}],
          ['link', 'image', 'video'],
          ['clean']
      ];
      const quill = new Quill('#editor', {
          theme: 'snow',
          placeholder: 'Tell us your story...',
          modules: {
              toolbar: toolbarOptions
          }
      });

      /**
       * Step1. select local image
       */
      function selectLocalImage() {
          const input = document.createElement('input');
          input.setAttribute('type', 'file');
          input.click();

          // Listen upload local image and save to server
          input.onchange = () => {
              const file = input.files[0];

              // file type is only image.
              if (/^image\//.test(file.type)) {
                  saveToServer(file);
              } else {
                  console.warn('You could only upload images.');
              }
          };
      }

      /**
       * Step2. save to server
       *
       * @param {File} file
       */
      function saveToServer(file) {
          const fd = new FormData();
          fd.append('image', file);

          const xhr = new XMLHttpRequest();
          const url = Routing.generate(
              'reports_upload',
              {'_locale': '{{ app.request.locale }}'}
          );
          xhr.open('POST', url, true);
          xhr.onload = () => {
              if (xhr.status === 200) {
                  const url = JSON.parse(xhr.responseText).url;
                  console.log(url);
                  insertToEditor(url);
              } else {
                  alert('Error while sending the image.');
              }
          };
          xhr.send(fd);
      }

      /**
       * Step3. insert image url to rich editor.
       *
       * @param {string} url
       */
      function insertToEditor(url) {
          // push image url to rich editor.
          const range = quill.getSelection();
          quill.insertEmbed(range.index, 'image', url);
      }

      // quill editor add image handler
      quill.getModule('toolbar').addHandler('image', () => {
          selectLocalImage();
      });

      var changed = false;
      var saveContent = function () {
          var content = quill.root.innerHTML;
          var url = Routing.generate(
              'reports_update_content',
              {id: {{ report.id }}, '_locale': '{{ app.request.locale }}'}
          );

          $.ajax({
              url: url,
              type: "POST",
              data: {content}
          }).done(function (data) {
              console.log('saved');
              document.getElementById('editor-saved').innerText = 'SAVED';
              changed = false;
          });
      };

      quill.on('text-change', function () {
          changed = true;
          document.getElementById('editor-saved').innerText = null;
      });

      // Save periodically
      setInterval(function () {
          if (changed) {
              console.log('saving');
              saveContent();
              //change = false;
          }
      }, 10 * 1000);

      window.onbeforeunload = function () {
          if (changed) {
              return "You have unsaved changes.";
          }
      };
  </script>
{% endblock %}

{% block stylesheets %}
  <link href="https://cdn.quilljs.com/1.3.5/quill.snow.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Crimson+Text|Roboto+Slab:300" rel="stylesheet">
  <style>
    #editor h1, #editor h2, #editor p {
      font-family: 'Crimson Text', serif;
    }

    #editor p {
      font-size: 22px;
      line-height: 1.58;
      letter-spacing: -.003em;
    }

    #editor h1 {
      font-size: 36px;
      letter-spacing: .023em;
    }

    #editor h2 {
      font-size: 26px;
      letter-spacing: .023em;
    }
  </style>
  <style>
    .content-wrapper {
      background-color: #FFFFFF;
    }

    #editor {
      border: none !important;
      padding: 30px;
    }
  </style>
{% endblock %}

{% block body %}
  <div id="editor">{{ report.content|raw }}</div>
  <br/>
  <button type="button" onclick="saveContent();" class="btn btn-primary">
    <i class="icon-floppy-disk position-left"></i> Save
  </button>
{% endblock %}
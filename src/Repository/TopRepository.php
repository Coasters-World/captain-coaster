<?php

declare(strict_types=1);

namespace App\Repository;

use App\Entity\Top;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\Persistence\ManagerRegistry;

/**
 * TopRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TopRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Top::class);
    }

    /**
     * Tops must have at lest 3 ranked coasters inside.
     *
     * @return \Doctrine\ORM\Query
     */
    public function findAllTops()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('t')
            ->addSelect('COUNT(t.id) as HIDDEN nb')
            ->from('App:Top', 't')
            ->join('t.topCoasters', 'tc')
            ->groupBy('t.id')
            ->having('nb > 2')
            ->orderBy('t.updatedAt', 'desc')
            ->getQuery();
    }

    /**
     * @return int|mixed
     */
    public function countTops()
    {
        try {
            return $this->getEntityManager()
                ->createQueryBuilder()
                ->select('count(1)')
                ->from('App:Top', 't')
                ->where('t.main = 1')
                ->getQuery()
                ->getSingleScalarResult();
        } catch (NonUniqueResultException) {
            return 0;
        }
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function findAllCustomLists()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('t')
            ->addSelect('COUNT(t.id) as HIDDEN nb')
            ->from('App:Top', 't')
            ->join('t.topCoasters', 'tc')
            ->where('t.main = 0')
            ->groupBy('t.id')
            ->having('nb > 2')
            ->orderBy('t.updatedAt', 'desc')
            ->getQuery();
    }

    /**
     * Return all lists for a user.
     */
    public function findAllByUser(User $user)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('t')
            ->from('App:Top', 't')
            ->where('t.user = :user')
            ->setParameter('user', $user)
            ->orderBy('t.main', 'desc')
            ->addOrderBy('t.updatedAt', 'desc')
            ->getQuery()
            ->getResult();
    }

    /**
     * @throws NonUniqueResultException
     * @throws \Doctrine\ORM\NoResultException
     */
    public function getTopWithData(Top $top)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('t', 'tc', 'c', 'm', 'p', 'co')
            ->from('App:Top', 't')
            ->leftJoin('t.topCoasters', 'tc')
            ->leftJoin('tc.coaster', 'c')
            ->leftJoin('c.park', 'p')
            ->leftJoin('p.country', 'co')
            ->leftJoin('c.manufacturer', 'm')
            ->where('t = :top')
            ->setParameter('top', $top)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * Get user main top coasters for monthly ranking update.
     */
    public function findUserTopForRanking(int $userId): array
    {
        $query = $this->getEntityManager()->createQuery('
            SELECT tc.position AS position, c.id AS coaster
            FROM App:Top t
            JOIN t.topCoasters tc
            JOIN tc.coaster c
            WHERE t.main = true
            AND t.user = :id
            AND c.kiddie = 0
        ');
        $query->setParameter('id', $userId);

        return $query->getResult();
    }
}

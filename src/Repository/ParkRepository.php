<?php

declare(strict_types=1);

namespace App\Repository;

use App\Entity\Park;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * ParkRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParkRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Park::class);
    }

    /**
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function countForUser(User $user)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('count(DISTINCT(p.id))')
            ->from('App:RiddenCoaster', 'r')
            ->join('r.coaster', 'c')
            ->join('c.park', 'p')
            ->where('r.user = :user')
            ->setParameter('user', $user)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getClosestParks(Park $park, int $minScore, int $maxDistance)
    {
        $parkLatitude = $park->getLatitude();
        $parkLongitude = $park->getLongitude();

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('distinct p.name as name, ROUND(( 6371 * acos( cos( radians(:parkLatitude) )
              * cos( radians( p.latitude ) )
              * cos( radians( p.longitude ) - radians(:parkLongitude) )
              + sin( radians(:parkLatitude) )
              * sin( radians( p.latitude ) ) ) ) ) AS distance, p.slug as slug')
            ->from('App:Park', 'p')
            ->join('p.coasters', 'c')
            ->where('p.latitude between :parkLatitudeMin and :parkLatitudeMax')
            ->andwhere('p.longitude between :parkLongitudeMin and :parkLongitudeMax')
            ->andwhere('c.score > :minScore')
            ->andwhere('p.id != :parkId')
            ->having('distance < :maxDistance')
            ->orderBy('distance')
            ->setParameter('parkLatitude', $parkLatitude)
            ->setParameter('parkLongitude', $parkLongitude)
            ->setParameter('parkLatitudeMin', $parkLatitude - 3)
            ->setParameter('parkLatitudeMax', $parkLatitude + 3)
            ->setParameter('parkLongitudeMin', $parkLongitude - 3)
            ->setParameter('parkLongitudeMax', $parkLongitude + 3)
            ->setParameter('minScore', $minScore)
            ->setParameter('parkId', $park->getId())
            ->setParameter('maxDistance', $maxDistance)
            ->getQuery()
            ->getResult();
    }

    public function findAllForSearch()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('p.name')
            ->addSelect('p.slug')
            ->from('App:Park', 'p')
            ->getQuery()
            ->getResult();
    }
}

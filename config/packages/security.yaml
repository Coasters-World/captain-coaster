security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # http://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
    providers:
        users_in_memory: { memory: null }
        api_user_provider:
            entity:
                class: 'App\Entity\User'
                property: 'apiKey'

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_home:
            pattern: ^/api$
            security: false

        main:
            lazy: true
            custom_authenticators:
                - App\Security\GoogleAuthenticator
            logout:
                path: logout

#        api_secured:
#            guard:
#                authenticators:
#                    - 'App\Security\TokenAuthenticator'
#            provider: 'api_user_provider'
#            stateless: true
#            pattern: '^/api/'

#        main:
#            # used for remember_me
#            provider: oauth_provider
##            anonymous: ~
#            oauth:
#                resource_owners:
#                    facebook: '/login/check-facebook'
#                    google: '/login/check-google'
#                # A am√©liorer
#                login_path: '/en/login'
#                use_forward: false
#                failure_path: '/en/login'
#                oauth_user_provider:
#                    service: 'my.custom.user_provider'
#            remember_me:
#                secret: '%env(APP_SECRET)%'
#                lifetime: 15552000 # 6 months
#                path: '/'
#                always_remember_me: true
#            logout:
#                path: '/logout'
#                target: '/'
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_CONTRIBUTOR, ROLE_PREVIEW_FEATURE]
        ROLE_SUPER_ADMIN: ROLE_ADMIN
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/team, roles: ROLE_CONTRIBUTOR }
        - { path: ^/api, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

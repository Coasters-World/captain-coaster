{% extends "base.html.twig" %}

{% block title %}{{ 'map_index.title'|trans }}{% endblock %}

{% block header %}
  <meta name="description" content="{{ 'map_index.description'|trans }}"/>
{% endblock %}

{% set pageHasFilters = true %}

{% block secondary_sidebar %}
  {% include 'Includes/filter_sidebar.html.twig' with {'filters': filters, 'filtersForm': filtersForm} only %}
{% endblock %}

{% block wide_body %}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mapbox-gl/1.13.1/mapbox-gl.min.css" />
    <div id="map" style="height:94vh;"></div>
{% endblock %}

{% block javascripts %}
  <script type="text/javascript" src="{{ asset('js/plugins/switchery.min.js') }}"></script>
  <script type="text/javascript">
    var elems = Array.prototype.slice.call(document.querySelectorAll('.switchery'));
    elems.forEach(function(html) {
      var switchery = new Switchery(html);
      html.addEventListener('click', function() {
        filterData();
      })
    });
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mapbox-gl/1.13.1/mapbox-gl.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mapbox-gl-leaflet/0.0.15/leaflet-mapbox-gl.min.js"></script>
  <script type="text/javascript">
    var map = null;
    var gmarkers = [];

    function initMap() {
      map = L.map('map').setView([48.384098, 7.970846], 5);
      var gl = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
        maxZoom: 15,
        minZoom : 3
      }).addTo(map);

      setInterval(generateMarkers(map, {{ markers|raw }}), 50);

      {% if parkId is not empty %}
      var park = gmarkers.find(function (element) {
        return element.parkId === {{ parkId }};
      });

      map.setView([park.getLatLng().lat, park.getLatLng().lng], 9);
      loadParkData(park);
      {% endif %}

    }

    function generateMarkers(map, markers) {

      // Adds markers to the map.
      markers.forEach(function(park) {
        var marker = L.marker([park['latitude'], park['longitude']]).addTo(map);
        marker.parkId = park['id'];
        marker.title = park['name'];

        gmarkers.push(marker);

        marker.on('click', function() {
          loadParkData(marker);
        });
      });
    }

    function removeMarkers() {
      gmarkers.forEach(function(park) {
        map.removeLayer(park);
      });
      gmarkers = [];
    }

    function loadParkData(marker) {
      if(marker._popup == undefined) {
        marker.bindPopup('Loading...').openPopup();

        $.ajax({
          url: Routing.generate('map_coasters_ajax', {
            'id': marker.parkId,
            '_locale': '{{ app.request.locale }}',
          }),
          type: 'GET',
          data: $('form').serialize(),
        }).done(function(coasters) {
          marker.bindPopup(coasters)
        });
      }
    }

    function filterData() {
      $.ajax({
        url: Routing.generate('map_markers_ajax', {'_locale': '{{ app.request.locale }}'}),
        type: 'GET',
        data: $('form').serialize(),
      }).done(function(data) {
        removeMarkers();
        generateMarkers(map, data);
      });
    }

    window.onload = function(){
      initMap();
    };
  </script>
{% endblock %}
